#!/usr/bin/python3
import os, sys, time, subprocess, tempfile, re
import server

out_temp = [None] * 1024
fileno = [None] * 1024

def exec_cmd(cmd, index = 0, wait = True):
    global out_temp, fileno
    print('CMD: ', cmd)
    #out_temp = tempfile.SpooledTemporaryFile(bufsize=1000 * 1000)
    out_temp[index] = tempfile.SpooledTemporaryFile()
    fileno[index] = out_temp[index].fileno()
    p1 = subprocess.Popen(cmd, stdout = fileno[index], stderr = fileno[index], shell=True)
    if wait:
        p1.wait()
    out_temp[index].seek(0)
    return p1

def parallel_cmd(cmd, num, wait = True):
    global out_temp, fileno
    p = []
    for i in range(0, num):
        out_temp.append(tempfile.SpooledTemporaryFile())
        fileno.append(out_temp[i].fileno())
        real_cmd = '%s %d' % (cmd, i)
        print('CMD: ', real_cmd)
        p.append(subprocess.Popen(real_cmd, stdout = fileno[i], stderr = fileno[i], shell=True))
    for i in range(0, num):
        if wait:
            p[i].wait()
        out_temp[i].seek(0)
    return p

def find_str(pattern, string):
    pat = re.compile(pattern)
    return pat.findall(string)[0].strip()

def find_str2(pattern, string):
    pat = re.compile(pattern)
    return pat.findall(string)[0]

def split_str(string):
    return filter(lambda x:x, string.split())

def b2s(s):
    return str(s, encoding = 'utf-8')

def get_res():
    return b2s(out_temp[0].read())

def run_parsec(task):
    ws = '/root/parsec-3.0'
    cur_path = os.getcwd()
    os.chdir('%s' % ws)
    cmd = './run.sh %s' % task
    t_total = 0
    nums = 1
    for i in range(0, nums):
        exec_cmd(cmd)
        res = get_res()
        print(res)
        (m, s) = find_str2('real(.*)m(.*)s', res)
        m = m.strip()
        s = s.strip()
        t = float(m) * 60 + float(s)
        t_total += t
    t_avg = t_total / nums
    os.chdir(cur_path)
    return t_avg

def run_parsec_parallel(task, num):
    ws = '/root/parsec-3.0'
    cur_path = os.getcwd()
    os.chdir('%s' % ws)
    t_total = 0
    nums = 1
    for i in range(0, nums):
        cmd = './run.sh %s' % task
        parallel_cmd(cmd, num)
        res = get_res()
        print(res)
        (m, s) = find_str2('real(.*)m(.*)s', res)
        m = m.strip()
        s = s.strip()
        t = float(m) * 60 + float(s)
        t_total += t
    t_avg = t_total / nums
    os.chdir(cur_path)
    return t_avg

def decode(data):
    pat = re.compile('(.*):(.*)')
    res = pat.findall(data)
    return res[0]

param = sys.argv[1]
if param == 'test':
    run_parsec_parallel('8 splash2x.raytrace', 9)
elif param == 'run':
    server.build()
    data = 0
    try:
        while True:
            (cmd, data) = decode(server.recv())
            if cmd == 'begin':
                server.send('begin:0')
            elif cmd == 'end':
                server.send('end:0')
                break #modify file
            elif cmd == 'tasks':
                task = data
                n_cores = find_str('([0-9]+).*', task)
                num_threads = int(int(n_cores) / 8)
                #avg_perf = run_parsec(task)
                avg_perf = run_parsec_parallel(task, num_threads)
                print(avg_perf, 's')
                server.send('res:%f' % avg_perf)
        server.client_close()
        server.server_close()
    except KeyboardInterrupt:
        server.client_close()
        server.server_close()
else:
    print('param error')
